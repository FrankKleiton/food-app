// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/adapters/product.go

// Package mock_adapters is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIProduct is a mock of IProduct interface.
type MockIProduct struct {
	ctrl     *gomock.Controller
	recorder *MockIProductMockRecorder
}

// MockIProductMockRecorder is the mock recorder for MockIProduct.
type MockIProductMockRecorder struct {
	mock *MockIProduct
}

// NewMockIProduct creates a new mock instance.
func NewMockIProduct(ctrl *gomock.Controller) *MockIProduct {
	mock := &MockIProduct{ctrl: ctrl}
	mock.recorder = &MockIProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProduct) EXPECT() *MockIProductMockRecorder {
	return m.recorder
}

// GetDescription mocks base method.
func (m *MockIProduct) GetDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDescription indicates an expected call of GetDescription.
func (mr *MockIProductMockRecorder) GetDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockIProduct)(nil).GetDescription))
}

// GetId mocks base method.
func (m *MockIProduct) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockIProductMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockIProduct)(nil).GetId))
}

// GetImage mocks base method.
func (m *MockIProduct) GetImage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetImage indicates an expected call of GetImage.
func (mr *MockIProductMockRecorder) GetImage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockIProduct)(nil).GetImage))
}

// GetName mocks base method.
func (m *MockIProduct) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIProductMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIProduct)(nil).GetName))
}

// GetPrice mocks base method.
func (m *MockIProduct) GetPrice() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockIProductMockRecorder) GetPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockIProduct)(nil).GetPrice))
}

// IsValid mocks base method.
func (m *MockIProduct) IsValid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValid indicates an expected call of IsValid.
func (mr *MockIProductMockRecorder) IsValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockIProduct)(nil).IsValid))
}
